// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace packet {

namespace {

const ::google::protobuf::Descriptor* C_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C_Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* S_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S_Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* S_Start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S_Start_reflection_ = NULL;
const ::google::protobuf::Descriptor* C_SetPiece_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C_SetPiece_reflection_ = NULL;
const ::google::protobuf::Descriptor* S_SetPiece_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S_SetPiece_reflection_ = NULL;
const ::google::protobuf::Descriptor* S_End_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S_End_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_packet_2eproto() {
  protobuf_AddDesc_packet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "packet.proto");
  GOOGLE_CHECK(file != NULL);
  C_Login_descriptor_ = file->message_type(0);
  static const int C_Login_offsets_[1] = {
  };
  C_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C_Login_descriptor_,
      C_Login::default_instance_,
      C_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C_Login));
  S_Login_descriptor_ = file->message_type(1);
  static const int S_Login_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Login, id_),
  };
  S_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S_Login_descriptor_,
      S_Login::default_instance_,
      S_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S_Login));
  S_Start_descriptor_ = file->message_type(2);
  static const int S_Start_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Start, your_piece_),
  };
  S_Start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S_Start_descriptor_,
      S_Start::default_instance_,
      S_Start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S_Start));
  C_SetPiece_descriptor_ = file->message_type(3);
  static const int C_SetPiece_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_SetPiece, pos_index_),
  };
  C_SetPiece_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C_SetPiece_descriptor_,
      C_SetPiece::default_instance_,
      C_SetPiece_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_SetPiece, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_SetPiece, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C_SetPiece));
  S_SetPiece_descriptor_ = file->message_type(4);
  static const int S_SetPiece_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_SetPiece, piece_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_SetPiece, pos_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_SetPiece, piece_list_),
  };
  S_SetPiece_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S_SetPiece_descriptor_,
      S_SetPiece::default_instance_,
      S_SetPiece_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_SetPiece, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_SetPiece, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S_SetPiece));
  S_End_descriptor_ = file->message_type(5);
  static const int S_End_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_End, winner_id_),
  };
  S_End_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S_End_descriptor_,
      S_End::default_instance_,
      S_End_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_End, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_End, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S_End));
  MessageType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_packet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C_Login_descriptor_, &C_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S_Login_descriptor_, &S_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S_Start_descriptor_, &S_Start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C_SetPiece_descriptor_, &C_SetPiece::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S_SetPiece_descriptor_, &S_SetPiece::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S_End_descriptor_, &S_End::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_packet_2eproto() {
  delete C_Login::default_instance_;
  delete C_Login_reflection_;
  delete S_Login::default_instance_;
  delete S_Login_reflection_;
  delete S_Start::default_instance_;
  delete S_Start_reflection_;
  delete C_SetPiece::default_instance_;
  delete C_SetPiece_reflection_;
  delete S_SetPiece::default_instance_;
  delete S_SetPiece_reflection_;
  delete S_End::default_instance_;
  delete S_End_reflection_;
}

void protobuf_AddDesc_packet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014packet.proto\022\006packet\"\t\n\007C_Login\"\025\n\007S_L"
    "ogin\022\n\n\002id\030\001 \002(\005\"\035\n\007S_Start\022\022\n\nyour_piec"
    "e\030\001 \002(\005\"\037\n\nC_SetPiece\022\021\n\tpos_index\030\001 \002(\005"
    "\"B\n\nS_SetPiece\022\r\n\005piece\030\001 \002(\005\022\021\n\tpos_ind"
    "ex\030\002 \002(\005\022\022\n\npiece_list\030\003 \003(\005\"\032\n\005S_End\022\021\n"
    "\twinner_id\030\001 \002(\005*a\n\013MessageType\022\013\n\007C_LOG"
    "IN\020\000\022\013\n\007S_LOGIN\020\001\022\013\n\007S_START\020\002\022\017\n\013C_SET_"
    "PIECE\020\003\022\017\n\013S_SET_PIECE\020\004\022\t\n\005S_END\020\005", 315);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "packet.proto", &protobuf_RegisterTypes);
  C_Login::default_instance_ = new C_Login();
  S_Login::default_instance_ = new S_Login();
  S_Start::default_instance_ = new S_Start();
  C_SetPiece::default_instance_ = new C_SetPiece();
  S_SetPiece::default_instance_ = new S_SetPiece();
  S_End::default_instance_ = new S_End();
  C_Login::default_instance_->InitAsDefaultInstance();
  S_Login::default_instance_->InitAsDefaultInstance();
  S_Start::default_instance_->InitAsDefaultInstance();
  C_SetPiece::default_instance_->InitAsDefaultInstance();
  S_SetPiece::default_instance_->InitAsDefaultInstance();
  S_End::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_packet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_packet_2eproto {
  StaticDescriptorInitializer_packet_2eproto() {
    protobuf_AddDesc_packet_2eproto();
  }
} static_descriptor_initializer_packet_2eproto_;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C_Login::C_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C_Login::InitAsDefaultInstance() {
}

C_Login::C_Login(const C_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C_Login::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C_Login::~C_Login() {
  SharedDtor();
}

void C_Login::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C_Login_descriptor_;
}

const C_Login& C_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

C_Login* C_Login::default_instance_ = NULL;

C_Login* C_Login::New() const {
  return new C_Login;
}

void C_Login::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C_Login::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C_Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C_Login::MergeFrom(const C_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Login::CopyFrom(const C_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Login::IsInitialized() const {

  return true;
}

void C_Login::Swap(C_Login* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C_Login_descriptor_;
  metadata.reflection = C_Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S_Login::kIdFieldNumber;
#endif  // !_MSC_VER

S_Login::S_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S_Login::InitAsDefaultInstance() {
}

S_Login::S_Login(const S_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S_Login::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S_Login::~S_Login() {
  SharedDtor();
}

void S_Login::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S_Login_descriptor_;
}

const S_Login& S_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

S_Login* S_Login::default_instance_ = NULL;

S_Login* S_Login::New() const {
  return new S_Login;
}

void S_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S_Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S_Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S_Login::MergeFrom(const S_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Login::CopyFrom(const S_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S_Login::Swap(S_Login* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S_Login_descriptor_;
  metadata.reflection = S_Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S_Start::kYourPieceFieldNumber;
#endif  // !_MSC_VER

S_Start::S_Start()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S_Start::InitAsDefaultInstance() {
}

S_Start::S_Start(const S_Start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S_Start::SharedCtor() {
  _cached_size_ = 0;
  your_piece_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S_Start::~S_Start() {
  SharedDtor();
}

void S_Start::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S_Start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S_Start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S_Start_descriptor_;
}

const S_Start& S_Start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

S_Start* S_Start::default_instance_ = NULL;

S_Start* S_Start::New() const {
  return new S_Start;
}

void S_Start::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    your_piece_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S_Start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 your_piece = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &your_piece_)));
          set_has_your_piece();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S_Start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 your_piece = 1;
  if (has_your_piece()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->your_piece(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S_Start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 your_piece = 1;
  if (has_your_piece()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->your_piece(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S_Start::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 your_piece = 1;
    if (has_your_piece()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->your_piece());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S_Start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S_Start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S_Start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S_Start::MergeFrom(const S_Start& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_your_piece()) {
      set_your_piece(from.your_piece());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S_Start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Start::CopyFrom(const S_Start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Start::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S_Start::Swap(S_Start* other) {
  if (other != this) {
    std::swap(your_piece_, other->your_piece_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S_Start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S_Start_descriptor_;
  metadata.reflection = S_Start_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C_SetPiece::kPosIndexFieldNumber;
#endif  // !_MSC_VER

C_SetPiece::C_SetPiece()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C_SetPiece::InitAsDefaultInstance() {
}

C_SetPiece::C_SetPiece(const C_SetPiece& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C_SetPiece::SharedCtor() {
  _cached_size_ = 0;
  pos_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C_SetPiece::~C_SetPiece() {
  SharedDtor();
}

void C_SetPiece::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C_SetPiece::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C_SetPiece::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C_SetPiece_descriptor_;
}

const C_SetPiece& C_SetPiece::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

C_SetPiece* C_SetPiece::default_instance_ = NULL;

C_SetPiece* C_SetPiece::New() const {
  return new C_SetPiece;
}

void C_SetPiece::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C_SetPiece::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_index_)));
          set_has_pos_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C_SetPiece::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pos_index = 1;
  if (has_pos_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C_SetPiece::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pos_index = 1;
  if (has_pos_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C_SetPiece::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos_index = 1;
    if (has_pos_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C_SetPiece::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C_SetPiece* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C_SetPiece*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C_SetPiece::MergeFrom(const C_SetPiece& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos_index()) {
      set_pos_index(from.pos_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C_SetPiece::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_SetPiece::CopyFrom(const C_SetPiece& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SetPiece::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C_SetPiece::Swap(C_SetPiece* other) {
  if (other != this) {
    std::swap(pos_index_, other->pos_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C_SetPiece::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C_SetPiece_descriptor_;
  metadata.reflection = C_SetPiece_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S_SetPiece::kPieceFieldNumber;
const int S_SetPiece::kPosIndexFieldNumber;
const int S_SetPiece::kPieceListFieldNumber;
#endif  // !_MSC_VER

S_SetPiece::S_SetPiece()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S_SetPiece::InitAsDefaultInstance() {
}

S_SetPiece::S_SetPiece(const S_SetPiece& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S_SetPiece::SharedCtor() {
  _cached_size_ = 0;
  piece_ = 0;
  pos_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S_SetPiece::~S_SetPiece() {
  SharedDtor();
}

void S_SetPiece::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S_SetPiece::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S_SetPiece::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S_SetPiece_descriptor_;
}

const S_SetPiece& S_SetPiece::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

S_SetPiece* S_SetPiece::default_instance_ = NULL;

S_SetPiece* S_SetPiece::New() const {
  return new S_SetPiece;
}

void S_SetPiece::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    piece_ = 0;
    pos_index_ = 0;
  }
  piece_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S_SetPiece::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 piece = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piece_)));
          set_has_piece();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos_index;
        break;
      }

      // required int32 pos_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_index_)));
          set_has_pos_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_piece_list;
        break;
      }

      // repeated int32 piece_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piece_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_piece_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_piece_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_piece_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S_SetPiece::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 piece = 1;
  if (has_piece()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->piece(), output);
  }

  // required int32 pos_index = 2;
  if (has_pos_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos_index(), output);
  }

  // repeated int32 piece_list = 3;
  for (int i = 0; i < this->piece_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->piece_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S_SetPiece::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 piece = 1;
  if (has_piece()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->piece(), target);
  }

  // required int32 pos_index = 2;
  if (has_pos_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos_index(), target);
  }

  // repeated int32 piece_list = 3;
  for (int i = 0; i < this->piece_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->piece_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S_SetPiece::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 piece = 1;
    if (has_piece()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piece());
    }

    // required int32 pos_index = 2;
    if (has_pos_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_index());
    }

  }
  // repeated int32 piece_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->piece_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->piece_list(i));
    }
    total_size += 1 * this->piece_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S_SetPiece::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S_SetPiece* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S_SetPiece*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S_SetPiece::MergeFrom(const S_SetPiece& from) {
  GOOGLE_CHECK_NE(&from, this);
  piece_list_.MergeFrom(from.piece_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_piece()) {
      set_piece(from.piece());
    }
    if (from.has_pos_index()) {
      set_pos_index(from.pos_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S_SetPiece::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_SetPiece::CopyFrom(const S_SetPiece& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SetPiece::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S_SetPiece::Swap(S_SetPiece* other) {
  if (other != this) {
    std::swap(piece_, other->piece_);
    std::swap(pos_index_, other->pos_index_);
    piece_list_.Swap(&other->piece_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S_SetPiece::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S_SetPiece_descriptor_;
  metadata.reflection = S_SetPiece_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S_End::kWinnerIdFieldNumber;
#endif  // !_MSC_VER

S_End::S_End()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S_End::InitAsDefaultInstance() {
}

S_End::S_End(const S_End& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S_End::SharedCtor() {
  _cached_size_ = 0;
  winner_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S_End::~S_End() {
  SharedDtor();
}

void S_End::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S_End::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S_End::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S_End_descriptor_;
}

const S_End& S_End::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

S_End* S_End::default_instance_ = NULL;

S_End* S_End::New() const {
  return new S_End;
}

void S_End::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winner_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S_End::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 winner_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_id_)));
          set_has_winner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S_End::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 winner_id = 1;
  if (has_winner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->winner_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S_End::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 winner_id = 1;
  if (has_winner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->winner_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S_End::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 winner_id = 1;
    if (has_winner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S_End::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S_End* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S_End*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S_End::MergeFrom(const S_End& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winner_id()) {
      set_winner_id(from.winner_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S_End::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_End::CopyFrom(const S_End& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_End::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S_End::Swap(S_End* other) {
  if (other != this) {
    std::swap(winner_id_, other->winner_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S_End::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S_End_descriptor_;
  metadata.reflection = S_End_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace packet

// @@protoc_insertion_point(global_scope)
